// Copyright 2020 ConsenSys AG
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package groth16

import (
	"testing"

	backend_bls377 "github.com/consensys/gnark/backend/bls377"
	"github.com/consensys/gurvy/bls377/fr"
)

func TestComputeH(t *testing.T) {
	const n = 10
	A := make([]fr.Element, n)
	B := make([]fr.Element, n)
	C := make([]fr.Element, n)
	expectedH := make([]fr.Element, 16)
	A[0].SetString("3978970733340151541160460328870183152087563023891174578722607319103291602338")
	B[0].SetString("5519280666570261192572043782616932099550224742860556770901989646757503432308")
	C[0].SetString("6924800278067507252485509571380959703366298839796086977356452915404508079610")
	A[1].SetString("7488318508387618945409062109743609505795627605956394772982737920747334223949")
	B[1].SetString("8344843539136514282835507380553483054180871257261777237158217935405423515807")
	C[1].SetString("3559085210450098678950834866439716591786887598440943937813201271498457354927")
	A[2].SetString("2420147635162995286688788630254374502635517119709704618441221192289805138677")
	B[2].SetString("2093851841774026535211048833225589090274546321368120036475536362766848069838")
	C[2].SetString("8242202799862391990981745519417743168238212536863449080586424409246524448574")
	A[3].SetString("6227086318545100046816294321804286844155281348233488397533092282104036301817")
	B[3].SetString("7548613128257608189511512397331405541277652678737187577586327641991194308266")
	C[3].SetString("4712036668525324077096858567740257232563542247254604171851057954830752600814")
	A[4].SetString("1767010469588943385772232782098207436123315739970815871255308076402460522716")
	B[4].SetString("5268185495508136628608211189303431587883163031828168456149730213611887667026")
	C[4].SetString("6916385412012417303128337989972639505148468126118315980201834164352691671944")
	A[5].SetString("7012618530441313385856791555752908929193146678873667252815093157281979030668")
	B[5].SetString("4613857718522236696579576340633930511200370490657902545003758129208235025491")
	C[5].SetString("5710843409139585140307434852998554460427461639665464769969561314658262741132")
	A[6].SetString("5335789919045347874047089146053320712611529972859803732422946582463661809041")
	B[6].SetString("3427309601388481707169300492532148271131969221969230339157463986353574082441")
	C[6].SetString("4063889622970899690944300311723166625169306585034435683821734007120798971335")
	A[7].SetString("2783394209260384458035044348517864917631460882587334312970627663656034678301")
	B[7].SetString("2343136976545616164994616713640929188970757024547416192265132760761852966246")
	C[7].SetString("483081301362591834919594860128879516660765040402111809154071487826063748557")
	A[8].SetString("4156793256373737655400392381211896434026931710499794180622414734063356840123")
	B[8].SetString("7432467422285966377084439669797524986662665362270033039778175315423267847940")
	C[8].SetString("2874703728404464659469597888806870849452756237706576809296293810563730519986")
	A[9].SetString("8199927226660795908332543744006148752900427840674135842753812812653758490806")
	B[9].SetString("7066001929692942188517204166766548971985451139710210313151579366973338638446")
	C[9].SetString("8321403640356687097026315142151258279240079298980314559771806416409465014477")
	expectedH[0].SetString("7782398469555828294647752617114515444715099999479061815771163450140531726624")
	expectedH[1].SetString("4701689288062574458155554348017820064085128967868041479068223690213808159153")
	expectedH[2].SetString("5773240734661054821105058335364507879215455884736431041075930770153196827417")
	expectedH[3].SetString("4430008663075340055570681260271475508744453011644659436594186985777875239909")
	expectedH[4].SetString("5293159083690165590347068946093606540443898801048204205045300446831727744815")
	expectedH[5].SetString("272177142499885579493716010452276371584654739076175567328412592813313406252")
	expectedH[6].SetString("5995984606756942227830675909734452947413901427664788436135418074562426104275")
	expectedH[7].SetString("6808098446036842299283970629392738739278889336880949126600163314411314787657")
	expectedH[8].SetString("48857087950413550241731164205916036550846184126544125671045818548092037649")
	expectedH[9].SetString("8229757359290435701536684615691652512640106506069606636148399560514233124480")
	expectedH[10].SetString("7486536221068617665728847675314458702282316190531463791154512620664800577830")
	expectedH[11].SetString("7799869307295829397869081481914591556840218077620501375141006871652243359988")
	expectedH[12].SetString("5572487871835836445627620749639442731687958077058639237703284282228178065342")
	expectedH[13].SetString("3031952431061688597913922713543624406818694349737393722449744612497314671271")
	expectedH[14].SetString("5823956675647904867599193233987686189497459491984483713315208960253899989011")
	expectedH[15].SetString("3920524502188845982638454764913867261210845354831386460279061209446868519983")
	var rootOfUnity fr.Element
	rootOfUnity.SetString(backend_bls377.RootOfUnityStr)
	fftDomain := backend_bls377.NewDomain(rootOfUnity, backend_bls377.MaxOrder, n)
	h := <-computeH(A, B, C, fftDomain)
	for i := 0; i < len(h); i++ {
		if !h[i].Equal(&expectedH[i]) {
			t.Fatal("incorrect result")
		}
	}

}

func BenchmarkComputeH(b *testing.B) {
	const n = 1000000
	A := make([]fr.Element, n)
	B := make([]fr.Element, n)
	C := make([]fr.Element, n)
	for i := 0; i < n; i++ {
		A[i].SetRandom()
		B[i].SetRandom()
		C[i].SetRandom()
	}
	var rootOfUnity fr.Element
	rootOfUnity.SetString(backend_bls377.RootOfUnityStr)
	fftDomain := backend_bls377.NewDomain(rootOfUnity, backend_bls377.MaxOrder, n)

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		<-computeH(A, B, C, fftDomain)
	}

}
